# 用户表
CREATE TABLE `user`(
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键（自增长）',
  `user_name` varchar(50) COMMENT '用户名', # 考虑到微信方式登录不设置这些，暂时不加not null，但是需要在前端用js判断，注册的时候不能为null
  `password` varchar(32) COMMENT '密码，加密存储',
	`openId` varchar(100) COMMENT '用户openid', # 服务端自己生成的，可能uuid.
  `phone` varchar(20) NOT NULL COMMENT '手机号',
  `email` varchar(50) NOT NULL COMMENT '邮箱', # 考虑到后面通知采用邮件的方式进行，暂时先用not NULL
	`gender` int(5) NOT NULL COMMENT '性别，0 未知，1 女性，2 男性',
	`icon` varchar(500) DEFAULT NULL COMMENT '头像地址',
	`number` VARCHAR(20) NOT NULL COMMENT '工号',
	`is_admin` tinyint(1) NOT NULL COMMENT '是否是高级管理员',
	`post_id` int(10) not null COMMENT '岗位id',
	`department_id` int(10) not null COMMENT '部门id',
	`wx_id` int(10) COMMENT '关联的微信用户表id',
  `created` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '自动插入，创建时间',
  `updated` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '自动插入，修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `user_name`(`user_name`) USING BTREE,
  UNIQUE INDEX `phone`(`phone`) USING BTREE,
  UNIQUE INDEX `email`(`email`) USING BTREE,
	UNIQUE INDEX `openId`(`openId`) USING BTREE,
	UNIQUE INDEX `number`(`number`) USING BTREE
) ENGINE = InnoDB COMMENT = '用户表';
-- 查询
SELECT * FROM `user`;
SELECT id FROM `user` where `user_name` = '高级管理员1';
# 联合查询
SELECT
	m.*,
	n.description
FROM
	(SELECT
		u.id,
		u.user_name,
		u.password,
		u.openId,
		u.phone,
		u.email,
		u.gender,
		u.icon,
		u.number,
		u.is_admin,
		p.name as 'postName',
		d.name as 'departmentName',
		u.wx_id,
		u.created,
		u.updated
	from
		`user` u,
		department d,
		post p
	where
		u.post_id = p.id and
		u.department_id = d.id
	) m
left JOIN
	(
	SELECT
	a.user_id,
	b.description
	FROM
		`sys_users_permission` a,
		`sys_permission` b
	WHERE
		a.permission_id = b.id
	) n
	ON n.user_id = m.id
WHERE m.user_name = '高级管理员1';

SELECT w.id
FROM `user` u, `wxusers` w
WHERE w.phone = u.phone AND w.phone = '15333333333';

-- 修改表	
DROP TABLE `user`;
TRUNCATE TABLE `user`;
-- 插入
INSERT INTO `user`(`user_name`, `password`, `openId`, `phone`, `email`, `gender`, `number`, `is_admin`, `post_id`, `department_id`)
			 VALUES('高级管理员1', '123456', 'dddddd1', '15333333333', 'test1@email.com', 2, 'c2101', 1, 1, 1);
INSERT INTO `user`(`user_name`, `password`, `openId`, `phone`, `email`, `gender`, `number`,`is_admin`, `post_id`, `department_id`)
			 VALUES('项目经理1', '123456', 'dddddd2', '15433333333', 'test2@email.com', 1, 'c2102', 0, 2, 1);
INSERT INTO `user`(`user_name`, `password`, `openId`, `phone`, `email`, `gender`, `number`, `is_admin`, `post_id`, `department_id`)
			 VALUES('机械设计工程师1', '123456', 'dddddd3', '15533333333', 'test3@email.com', 2, 'c2103', 0, 3, 1);
-- 更新
UPDATE `user` SET `user_name`='高级管理员1', `password`='123456', `openId`='dddddd1' WHERE `phone`='15333333333';
UPDATE `user` SET `wx_id`=1 WHERE `phone`='15333333333';

CREATE TABLE `department`(
	`id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键（自增长）',
	`name` VARCHAR(20) NOT NULL COMMENT '部门名称',
	`number` VARCHAR(10) COMMENT '部门代号',
	`created` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '自动插入，创建时间',
  `updated` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '自动插入，修改时间',
	PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE,
  UNIQUE INDEX `number`(`number`) USING BTREE
)ENGINE = InnoDB COMMENT = '部门表';

SELECT * FROM `department`;
INSERT INTO `department` (`name`, `number`) VALUES('部门1', 'n01');
INSERT INTO `department` (`name`, `number`) VALUES('部门2', 'n02');
INSERT INTO `department` (`name`, `number`) VALUES('部门3', 'n03');


CREATE TABLE `post`(
	`id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键（自增长）',
	`name` VARCHAR(20) NOT NULL COMMENT '岗位名称',
	`number` VARCHAR(10) COMMENT '岗位代号',
	`created` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '自动插入，创建时间',
  `updated` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '自动插入，修改时间',
	PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE,
  UNIQUE INDEX `number`(`number`) USING BTREE
)ENGINE = InnoDB COMMENT = '岗位表';

SELECT * FROM `post`;
INSERT INTO `post` (`name`, `number`) VALUES('高级管理员', 'p1');
INSERT INTO `post` (`name`, `number`) VALUES('项目经理', 'p2');
INSERT INTO `post` (`name`, `number`) VALUES('机械设计工程师', 'p3');
INSERT INTO `post` (`name`, `number`) VALUES('电气设计工程师', 'p4');
INSERT INTO `post` (`name`, `number`) VALUES('软件设计工程师', 'p5');
INSERT INTO `post` (`name`, `number`) VALUES('商务人员(采购)', 'p6');
INSERT INTO `post` (`name`, `number`) VALUES('入库管理', 'p7');

CREATE TABLE `sys_permission` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `description` varchar(255) NOT NULL COMMENT '描述',
  `created` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '自动插入，创建时间',
  `updated` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '自动插入，修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `description` (`description`)
) ENGINE=InnoDB COMMENT='权限表';
SELECT * FROM `sys_permission`;
INSERT INTO `sys_permission` (`description`) VALUES ('增加、删除、改动，用户');
INSERT INTO `sys_permission` (`description`) VALUES ('查看用户');
INSERT INTO `sys_permission` (`description`) VALUES ('增加、删除、改动岗位');
INSERT INTO `sys_permission` (`description`) VALUES ('查看岗位');
INSERT INTO `sys_permission` (`description`) VALUES ('增加、删除、改动项目组');
INSERT INTO `sys_permission` (`description`) VALUES ('查看项目组');
INSERT INTO `sys_permission` (`description`) VALUES ('增加、删除、查看、改动外协');

CREATE TABLE `sys_users_permission` (
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `permission_id` bigint(20) NOT NULL COMMENT '权限ID',
  PRIMARY KEY (`user_id`,`permission_id`) USING BTREE,
	KEY `user_id` (`user_id`) USING BTREE,
  KEY `permission_id` (`permission_id`) USING BTREE
) ENGINE=InnoDB COMMENT='用户-权限表';

SELECT * FROM `sys_users_permission`;
SELECT
	a.user_id,
	b.description
FROM
	`sys_users_permission` a,
	`sys_permission` b
WHERE
	a.permission_id = b.id;
INSERT INTO `sys_users_permission` VALUES(2, 2);
INSERT INTO `sys_users_permission` VALUES(2, 4);
INSERT INTO `sys_users_permission` VALUES(2, 6);
INSERT INTO `sys_users_permission` VALUES(2, 7);

# 微信用户表
# 微信登录后，如果没有关联users表，需要前端跳转填写身份、工号等信息的页面，并同时在users表中插入记录。
CREATE TABLE `wxusers`(
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键（自增长）',
  `nick_name` varchar(50) NOT NULL COMMENT '微信用户名',
  `avatar_url` varchar(500) NOT NULL COMMENT '微信头像地址',
	`openId` varchar(100) NOT NULL COMMENT '微信网关返回的用户唯一标识',
  `phone` varchar(20) NOT NULL COMMENT '手机号', # 注册时通过手机号和users表进行关联
	`user_id` int(10) COMMENT '关联的用户表id',
  `created` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '自动插入，创建时间',
  `updated` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '自动插入，修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `phone`(`phone`) USING BTREE,
	UNIQUE INDEX `openId`(`openId`) USING BTREE
) ENGINE = InnoDB COMMENT = '微信用户表';

SELECT * FROM `wxusers`;
# 联合查询
SELECT
	u.id
FROM
	`user` u
JOIN
	wxusers w
	ON	u.phone = w.phone
WHERE w.phone = '15333333333';

UPDATE `wxusers` SET user_id = 1;
DROP TABLE `wxusers`;
TRUNCATE TABLE `wxusers`;
INSERT INTO `wxusers`(`nick_name`, `avatar_url`, `openId`, `phone`) VALUES('高级管理员1的wx', 'https://xxxx', 'unadf323jq', '15333333333');
											 
										 
